---
---

<header class="sticky top-0 z-50 bg-opacity-25 backdrop-blur-lg">
    <nav class="h-[10vh] nav flex flex-wrap items-center justify-between lg:text-xl text-lg px-2">
        <div class="h-[10vh] flex flex-no-shrink items-center ">
            <a href="/" class="tracking-tight text-gray-400 hover:text-teal-300 ease-linear duration-150">&lt;rt /&gt;</a>
        </div>

        <input class="menu-btn hidden" type="checkbox" id="menu-btn">
        <label class="menu-icon block cursor-pointer md:hidden px-2 py-4 relative select-none" for="menu-btn">
            <span class="navicon flex items-center relative text-gray-400"></span>
        </label>

        <ul class="menu border-b md:border-none flex gap-12 justify-end list-reset m-0 w-full md:w-auto ">
            <li class="py-3 border-t-2 border-gray-800 md:border-none"><a href="/" class="block md:inline-block no-underline text-gray-400 hover:text-teal-300 ease-linear duration-150">/home</a></li>          
            <li class="py-3 border-t-2 border-gray-800 md:border-none"><a href="/blog" class="block md:inline-block no-underline text-gray-400 hover:text-teal-300 ease-linear duration-150">/blog</a></li>          
        </ul>
    </nav>
    <hr>
</header>

<script>
    var links = document.querySelectorAll('.menu a');

    // Loop through each anchor element
    links.forEach(function(link) {
        // Attach mouseover event listener to each anchor element
        link.addEventListener('mouseover', function() {
            animateText(this, 50); // Pass the current anchor element as an argument
            // Remove the event listener after the animation completes
            this.removeEventListener('mouseover', arguments.callee);
        });
    });

    function generateRandomCharacter() {
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+';
        return characters.charAt(Math.floor(Math.random() * characters.length));
    }

    function animateText(element, duration) {
        return new Promise<void>(resolve => {
            const originalText = element.textContent;
            const length = originalText!.length;
            let counter = 0;
            const interval = setInterval(() => {
                let newText = '';
                for (let i = 0; i < length; i++) {
                    if (i <= counter) {
                        newText += originalText!.charAt(i);
                    } else {
                        newText += generateRandomCharacter();
                    }
                }
            
                element.textContent = newText;
                counter++;
                if (counter > length) {
                    clearInterval(interval);
                    element.textContent = originalText;
                }
            }, duration);

            setTimeout(() => {
                resolve();
            }, duration * 10);
        });
    }
</script>


<!-- <script>
    var links = document.querySelectorAll('.menu a');

    // Loop through each anchor element
    links.forEach(function(link) {
        // Attach mouseover event listener to each anchor element
        link.addEventListener('mouseover', function() {
            animateText(this); // Pass the current anchor element as an argument
        });
    });

	function generateRandomCharacter() {
		const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+';
		return characters.charAt(Math.floor(Math.random() * characters.length));
	}

	function animateText(element) {
	    return new Promise<void>(resolve => {
			const originalText = element.textContent;
    		const length = originalText!.length;
    		let counter = 0;
    		const interval = setInterval(() => {
	      		let newText = '';
	      		for (let i = 0; i < length; i++) {
	        		if (i <= counter) {
	          			newText += originalText!.charAt(i);
	        		} else {
	          			newText += generateRandomCharacter();
	        		}
	      		}
	      	
				element.textContent = newText;
		      	counter++;
		      	if (counter > length) {
		        	clearInterval(interval);
		        	element.textContent = originalText;
		      	}
	    	}, 500);

	        setTimeout(() => {
	            resolve();
	        }, 500 * 10);
	    });
	}
</script> -->

<style>
	@media (max-width: 767px) {
		.navicon {
			width: 1.125em;
			height: .125em;
		}

		.navicon::before,
		.navicon::after {
			display: block;
			position: absolute;
			width: 100%;
			height: 100%;
			transition: all .2s ease-out;
			content: '';
			background-color: rgb(156 163 175 / var(--tw-text-opacity));
		}

		.navicon::before {
			top: 5px;
		}

		.navicon::after {
			top: -5px;
		}

		.menu-btn:not(:checked) ~ .menu {
			display: none;
		}

		.menu-btn:checked ~ .menu {
			display: block;
		}

		.menu-btn:checked ~ .menu-icon .navicon {
			background: transparent;
		}

		.menu-btn:checked ~ .menu-icon .navicon::before {
			transform: rotate(-45deg);
		}

		.menu-btn:checked ~ .menu-icon .navicon::after {
			transform: rotate(45deg);
		}

		.menu-btn:checked ~ .menu-icon .navicon::before,
		.menu-btn:checked ~ .menu-icon .navicon::after {
			top: 0;
		}
	}
</style>